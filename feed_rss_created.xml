<?xml version="1.0" encoding="UTF-8" ?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"> <channel><title>Paul Withers&#39; Blog</title><description>A blog about various HCL software, software development and related learning, from an Lifetime IBM Champion and former HCL Lifetime Ambassador</description><link>https://paulswithers.github.io/</link><atom:link href="https://paulswithers.github.io/feed_rss_created.xml" rel="self" type="application/rss+xml" /><managingEditor>Paul S. Withers</managingEditor><docs>https://github.com/paulswithers/paulswithers.github.io</docs><language>en</language> <pubDate>Sun, 05 Oct 2025 15:04:49 -0000</pubDate> <lastBuildDate>Sun, 05 Oct 2025 15:04:49 -0000</lastBuildDate> <ttl>1440</ttl> <generator>MkDocs RSS plugin - v1.17.3</generator> <image> <url>None</url> <title>Paul Withers' Blog</title><link>https://paulswithers.github.io/</link> </image> <item> <title>Effective AI Usage: Understanding Brains</title> <description>&lt;h1&gt;Effective AI Usage: Understanding Brains&lt;/h1&gt;&lt;p&gt;I&#39;ve talked about the (current) &lt;a href=&#34;./2025-08-16-ai-lessons.md&#34;&gt;moving parts of AI&lt;/a&gt; and &lt;a href=&#34;./2025-09-15-barriers-to-effective-ai-2.md&#34;&gt;AI-fu&lt;/a&gt;. But a fundamental aspect of AI-fu is being aware of how we think and how that&#39;s different to how LLMs &#34;think&#34;. It&#39;s probably true that most people are not consciously aware of how they think or aware of how colleagues thinking works differently. So it&#39;s well worth raising that topic, because it&#39;s crucial to the quality of results.&lt;/p&gt;</description><link>https://paulswithers.github.io/blog/2025/10/05/effective-ai-3/</link> <pubDate>Sun, 05 Oct 2025 00:00:00 +0000</pubDate><source url="https://paulswithers.github.io/feed_rss_created.xml">Paul Withers' Blog</source><guid isPermaLink="true">https://paulswithers.github.io/blog/2025/10/05/effective-ai-3/</guid> </item> <item> <title>Effective AI Usage: AI-fu</title> <description>&lt;h1&gt;Effective AI Usage: AI-fu&lt;/h1&gt;&lt;p&gt;In &lt;a href=&#34;./2025-09-08-effective-ai-1.md&#34;&gt;my last blog post&lt;/a&gt; I talked about the many aspects of modern AI and the importance of understanding them all. But even more important than this is what I am terming &#34;AI-fu&#34;. So what is AI-fu?&lt;/p&gt;</description><link>https://paulswithers.github.io/blog/2025/09/15/effective-ai-2/</link> <pubDate>Mon, 15 Sep 2025 00:00:00 +0000</pubDate><source url="https://paulswithers.github.io/feed_rss_created.xml">Paul Withers' Blog</source><guid isPermaLink="true">https://paulswithers.github.io/blog/2025/09/15/effective-ai-2/</guid> </item> <item> <title>XPages App to Web App: Part 20: Custom CSP Settings</title> <description>&lt;h1&gt;XPages App to Web App: Part 20: Custom CSP Settings&lt;/h1&gt;&lt;p&gt;A good web server will enforce &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides/CSP&#34;&gt;Content Security Policy&lt;/a&gt; settings. If you are using something like Express as the web server, the endpoints will set that Content Security Policy. In the case of Single Page Applications hosted on Domino REST API, since release 1.15 by default a strict CSP is applied. But it is possible to change the CSP settings per application.&lt;/p&gt;</description><link>https://paulswithers.github.io/blog/2025/09/14/framework-web-20/</link> <pubDate>Sun, 14 Sep 2025 00:00:00 +0000</pubDate><source url="https://paulswithers.github.io/feed_rss_created.xml">Paul Withers' Blog</source><guid isPermaLink="true">https://paulswithers.github.io/blog/2025/09/14/framework-web-20/</guid> </item> <item> <title>Effective AI Usage Part One - What is AI?</title> <description>&lt;h1&gt;Effective AI Usage Part One - What is AI?&lt;/h1&gt;&lt;p&gt;In &lt;a href=&#34;./2025-08-16-ai-lessons.md&#34;&gt;my last blog post&lt;/a&gt; I talked about some lessons I&#39;ve learned from using AI. I talked about a follow-up article talking about AI use at a higher level. Recent experience has reinforced my thinking on this. In this blog post we&#39;re going to focus on what AI is, the initial interaction, and training.&lt;/p&gt;</description><link>https://paulswithers.github.io/blog/2025/09/08/effective-ai-1/</link> <pubDate>Mon, 08 Sep 2025 00:00:00 +0000</pubDate><source url="https://paulswithers.github.io/feed_rss_created.xml">Paul Withers' Blog</source><guid isPermaLink="true">https://paulswithers.github.io/blog/2025/09/08/effective-ai-1/</guid> </item> <item> <title>More AI Lessons</title> <description>&lt;h1&gt;More AI Lessons&lt;/h1&gt;&lt;p&gt;A little while ago I blogged on &lt;a href=&#34;./2025-06-30-rapid-development.md&#34;&gt;developing at speed&lt;/a&gt;. The obvious omission from all aspects was &lt;strong&gt;AI&lt;/strong&gt;. But AI – like an IDE – is just a tool. Unless you understand what it can and can&#39;t provide, unless you use it intelligently, you will not reap the benefits. But unlike an IDE, AI doesn&#39;t come with a set of menus that hint at what it can and can&#39;t do. AI doesn&#39;t come with a marketplace of extensions that provide functionality shared by the community. And it&#39;s so new that we&#39;re all working it out. So what are my thoughts?&lt;/p&gt;</description><link>https://paulswithers.github.io/blog/2025/08/16/ai-lessons/</link> <pubDate>Sat, 16 Aug 2025 00:00:00 +0000</pubDate><source url="https://paulswithers.github.io/feed_rss_created.xml">Paul Withers' Blog</source><guid isPermaLink="true">https://paulswithers.github.io/blog/2025/08/16/ai-lessons/</guid> </item> <item> <title>Supercharging Input to Domino REST API Agents</title> <description>&lt;h1&gt;Supercharging Input to Domino REST API Agents&lt;/h1&gt;&lt;p&gt;One of the things I learned when building &lt;a href=&#34;https://github.com/HCL-TECH-SOFTWARE/volt-mx-ls-toolkit&#34;&gt;HCL Volt MX LotusScript Toolkit&lt;/a&gt; was that calling a web agent with &lt;code&gt;?OpenAgent&lt;/code&gt; URL populates the &lt;code&gt;NotesSession.DocumentContext&lt;/code&gt; with various fields containing useful information from the request. So when I was building agent processing functionality into the POC that became Domino REST API, I utilised the same approach to provide opportunities to pass contextual information across to an agent.&lt;/p&gt;</description><link>https://paulswithers.github.io/blog/2025/08/05/drapi-agents/</link> <pubDate>Tue, 05 Aug 2025 00:00:00 +0000</pubDate><source url="https://paulswithers.github.io/feed_rss_created.xml">Paul Withers' Blog</source><guid isPermaLink="true">https://paulswithers.github.io/blog/2025/08/05/drapi-agents/</guid> </item> <item> <title>Developing at Speed</title> <description>&lt;h1&gt;Developing at Speed&lt;/h1&gt;&lt;p&gt;One of the main outputs of research development is the proof of concept. An early lesson I picked up when I joined HCL Labs was to deliver working code, not slides. And the key when building a proof of concept is speed. In some cases, it may end up proving why an approach &lt;em&gt;won&#39;t&lt;/em&gt; work. In many scenarios, it may end up being put on a shelf indefinitely. Even if the concept proves appealing, the implementation choices may not be the preferred option for the final solution. So speed is of the essence: spending a couple of weeks building something that goes nowhere is acceptable; spending a couple of months is not. So the ability to get maximum results in the minimum time is key.&lt;/p&gt;&lt;p&gt;But how do you do that?&lt;/p&gt;</description><link>https://paulswithers.github.io/blog/2025/06/30/rapid-development/</link> <pubDate>Mon, 30 Jun 2025 00:00:00 +0000</pubDate><source url="https://paulswithers.github.io/feed_rss_created.xml">Paul Withers' Blog</source><guid isPermaLink="true">https://paulswithers.github.io/blog/2025/06/30/rapid-development/</guid> </item> <item> <title>Adventures in Rust</title> <description>&lt;h1&gt;Adventures in Rust&lt;/h1&gt;&lt;p&gt;One of my core principles for IT research development can be summed up by a saying more than 2500 years old, attributed to &lt;a href=&#34;https://en.wikipedia.org/wiki/Solon&#34;&gt;Solon&lt;/a&gt; and appearing twice in Plutarch’s Life of Solon: “I grow old always learning many things”. In many ways, to stop learning is to stop living.&lt;/p&gt;</description><link>https://paulswithers.github.io/blog/2025/06/15/rust/</link> <pubDate>Sun, 15 Jun 2025 00:00:00 +0000</pubDate><source url="https://paulswithers.github.io/feed_rss_created.xml">Paul Withers' Blog</source><guid isPermaLink="true">https://paulswithers.github.io/blog/2025/06/15/rust/</guid> </item> <item> <title>2025 05 18 engage 2025</title> <description>&lt;p&gt;This week, once again, I will be speaking at Engage in Den Haag. As usual, it promises to be a great conference. And as usual, I will be busy.&lt;/p&gt;</description><link>https://paulswithers.github.io/blog/2025/05/18/engage-2025/</link> <pubDate>Sun, 18 May 2025 00:00:00 +0000</pubDate><source url="https://paulswithers.github.io/feed_rss_created.xml">Paul Withers' Blog</source><guid isPermaLink="true">https://paulswithers.github.io/blog/2025/05/18/engage-2025/</guid> </item> <item> <title>Shu-Ha-Ri</title> <description>&lt;h1&gt;Shu-Ha-Ri&lt;/h1&gt;&lt;p&gt;Some months ago &lt;a href=&#34;https://wissel.net&#34;&gt;Stephan Wissel&lt;/a&gt; pointed me to &lt;a href=&#34;https://martinfowler.com/bliki/ShuHaRi.html&#34;&gt;an article on Shu-Ha-Ri&lt;/a&gt;, which refers to Alistair Cockburn&#39;s &lt;a href=&#34;https://www.amazon.com/Agile-Software-Development-Cooperative-Game-ebook/dp/B0027976NG&#34;&gt;Agile Software Development&lt;/a&gt;. It&#39;s well worth software developers being aware of the concept, because it is crucial to the developer&#39;s life journey.&lt;/p&gt;</description><link>https://paulswithers.github.io/blog/2025/05/15/shu-ha-ri/</link> <pubDate>Thu, 15 May 2025 00:00:00 +0000</pubDate><source url="https://paulswithers.github.io/feed_rss_created.xml">Paul Withers' Blog</source><guid isPermaLink="true">https://paulswithers.github.io/blog/2025/05/15/shu-ha-ri/</guid> </item> <item> <title>Domino REST API, CORS and Regex</title> <description>&lt;h1&gt;Domino REST API, CORS and Regex&lt;/h1&gt;&lt;p&gt;Release 1.1.3.1 of Domino REST API introduces &lt;a href=&#34;https://opensource.hcltechsw.com/Domino-rest-api/whatsnew/v1.1.3.html#cors-is-now-using-regex&#34;&gt;a breaking change in CORS handling&lt;/a&gt;. This makes configuration less straightforward, but as the documentation states, it increases the flexibility and probably makes things a lot easier for larger environments. And though regex is not something Domino developers work with regularly, there are tools close to home that can help.&lt;/p&gt;</description><link>https://paulswithers.github.io/blog/2025/05/01/drapi-cors-regex/</link> <pubDate>Thu, 01 May 2025 00:00:00 +0000</pubDate><source url="https://paulswithers.github.io/feed_rss_created.xml">Paul Withers' Blog</source><guid isPermaLink="true">https://paulswithers.github.io/blog/2025/05/01/drapi-cors-regex/</guid> </item> <item> <title>Using AI</title> <description>&lt;h1&gt;Using AI&lt;/h1&gt;&lt;p&gt;As a researcher, I&#39;m always looking to learn, to expand the toolbag I have, and find innovative ways to improve outcomes. Even when AI is not at the heart of the project I&#39;m working on, I&#39;m constantly looking for ways it can make my life easier and life easier for developers using what I create. And the fact that we targeted a standard IDE means the effort required to integrate AI is reduced. But as with any new tool, it&#39;s important to learn what it can do and what it can&#39;t. And work this week has shown me that this requires a diligent approach.&lt;/p&gt;</description><link>https://paulswithers.github.io/blog/2025/04/26/using-ai/</link> <pubDate>Sat, 26 Apr 2025 00:00:00 +0000</pubDate><source url="https://paulswithers.github.io/feed_rss_created.xml">Paul Withers' Blog</source><guid isPermaLink="true">https://paulswithers.github.io/blog/2025/04/26/using-ai/</guid> </item> <item> <title>XPages App to Web App: Part Nineteen: Spots By Date and Stats Pages</title> <description>&lt;h1&gt;XPages App to Web App: Part Nineteen: Spots By Date and Stats Pages&lt;/h1&gt;&lt;p&gt;Back when the application was on XPages and spots were associated to a trip, there was a summary page that gave stats for the number of new spots, ships, ports, and countries during a trip. Now the requirement for trips has gone. But sometimes it&#39;s nice to see details of new documents across a period of time. So over the weekend, I added that functionality. This was very similar to a Spots By Date page, which I had not yet covered. So we&#39;ll cover both together.&lt;/p&gt;</description><link>https://paulswithers.github.io/blog/2025/04/22/framework-web-19/</link> <pubDate>Tue, 22 Apr 2025 00:00:00 +0000</pubDate><source url="https://paulswithers.github.io/feed_rss_created.xml">Paul Withers' Blog</source><guid isPermaLink="true">https://paulswithers.github.io/blog/2025/04/22/framework-web-19/</guid> </item> <item> <title>XPages App to Web App: Part Eighteen: CSP Enhancement</title> <description>&lt;h1&gt;XPages App to Web App: Part Eighteen: CSP Enhancement&lt;/h1&gt;&lt;p&gt;In my &lt;a href=&#34;./2025-04-07-css-export.md&#34;&gt;last blog post&lt;/a&gt; I talked about CSP and inline CSS. I mentioned that I had not addressed these issues with this Ship Spotter app. In this blog post we&#39;ll start to fix that.&lt;/p&gt;</description><link>https://paulswithers.github.io/blog/2025/04/19/framework-web-18/</link> <pubDate>Sat, 19 Apr 2025 00:00:00 +0000</pubDate><source url="https://paulswithers.github.io/feed_rss_created.xml">Paul Withers' Blog</source><guid isPermaLink="true">https://paulswithers.github.io/blog/2025/04/19/framework-web-18/</guid> </item> <item> <title>Avoiding Inline Styles in XPages</title> <description>&lt;h1&gt;Avoiding Inline Styles in XPages&lt;/h1&gt;&lt;p&gt;Recently there have been discussions about inline CSS in XPages. The absence of anyone mentioning a feature in XPages prompted me to eventually ask about a piece of functionality relevant to this.&lt;/p&gt;</description><link>https://paulswithers.github.io/blog/2025/04/07/css-export/</link> <pubDate>Mon, 07 Apr 2025 00:00:00 +0000</pubDate><source url="https://paulswithers.github.io/feed_rss_created.xml">Paul Withers' Blog</source><guid isPermaLink="true">https://paulswithers.github.io/blog/2025/04/07/css-export/</guid> </item> <item> <title>XPages App to Web App: Part Seventeen - Lessons Learned</title> <description>&lt;h1&gt;XPages App to Web App: Part Seventeen - Lessons Learned&lt;/h1&gt;&lt;p&gt;Now the application is built and has been in use for many months. It&#39;s time to review experiences and lessons learned.&lt;/p&gt;</description><link>https://paulswithers.github.io/blog/2025/04/02/framework-web-17/</link> <pubDate>Wed, 02 Apr 2025 00:00:00 +0000</pubDate><source url="https://paulswithers.github.io/feed_rss_created.xml">Paul Withers' Blog</source><guid isPermaLink="true">https://paulswithers.github.io/blog/2025/04/02/framework-web-17/</guid> </item> <item> <title>Lessons Learned from Including Web Components in an Ember.js Application</title> <description>&lt;h1&gt;Lessons Learned from Including Web Components in an Ember.js Application&lt;/h1&gt;&lt;p&gt;One of the key skills when working in IT research is the ability to work out how something works, either by looking at the code or being able to see the process behind a button or API call on your screen. The inevitable consequence then is that you understand how things work, you see comparisons between technologies or frameworks, and you begin to identify whether or why something will work or fail. You also gain understanding of various possible approaches and which is the right one. That results in a &#34;lessons learned&#34; blog post like this one.&lt;/p&gt;</description><link>https://paulswithers.github.io/blog/2025/03/14/web-components-ember/</link> <pubDate>Fri, 14 Mar 2025 00:00:00 +0000</pubDate><source url="https://paulswithers.github.io/feed_rss_created.xml">Paul Withers' Blog</source><guid isPermaLink="true">https://paulswithers.github.io/blog/2025/03/14/web-components-ember/</guid> </item> <item> <title>XPages App to Web App: Part Sixteen: Spots</title> <description>&lt;h1&gt;XPages App to Web App: Part Sixteen: Spots&lt;/h1&gt;&lt;p&gt;Now that we&#39;ve set up the CRUD pages for ships and spots, it&#39;s time to put them together. When we search a ship, we&#39;ll want to be able to see the spots created for that ship. Now let&#39;s set that up.&lt;/p&gt;</description><link>https://paulswithers.github.io/blog/2025/02/11/framework-web-16/</link> <pubDate>Tue, 11 Feb 2025 00:00:00 +0000</pubDate><source url="https://paulswithers.github.io/feed_rss_created.xml">Paul Withers' Blog</source><guid isPermaLink="true">https://paulswithers.github.io/blog/2025/02/11/framework-web-16/</guid> </item> <item> <title>XPages App to Web App: Part Fifteen - Dialogs</title> <description>&lt;h1&gt;XPages App to Web App: Part Fifteen - Dialogs&lt;/h1&gt;&lt;p&gt;When it comes to creating Ship Spots, one of the pain points I highlighted with the previous application was when a Ship Spot required creating a new Port or a new Country. This required switching to an &#34;admin&#34; area to open a Port form to complete and save; and if the country hasn&#39;t been created, it requires additionally switching to a County form to complete and save, before returning to the Port and back to the Ship Spot. Options were cached server-side in &lt;code&gt;viewScope&lt;/code&gt;, so launching additional browser windows wasn&#39;t an option - the page would still need to be refreshed and entered data lost. We can improve on this.&lt;/p&gt;</description><link>https://paulswithers.github.io/blog/2025/02/08/framework-web-15/</link> <pubDate>Sat, 08 Feb 2025 00:00:00 +0000</pubDate><source url="https://paulswithers.github.io/feed_rss_created.xml">Paul Withers' Blog</source><guid isPermaLink="true">https://paulswithers.github.io/blog/2025/02/08/framework-web-15/</guid> </item> <item> <title>XPages App to Web App: Part Fourteen - Fields and Save</title> <description>&lt;h1&gt;XPages App to Web App: Part Fourteen - Fields and Save&lt;/h1&gt;&lt;p&gt;In the last part I covered &lt;a href=&#34;https://www.w3schools.com/css/css_grid.asp&#34;&gt;CSS Grid&lt;/a&gt; and its use for the layout of the Ship Spot form. In this part I&#39;m going to cover the additional form functionality and save functionality.&lt;/p&gt;</description><link>https://paulswithers.github.io/blog/2025/02/07/framework-web-14/</link> <pubDate>Fri, 07 Feb 2025 00:00:00 +0000</pubDate><source url="https://paulswithers.github.io/feed_rss_created.xml">Paul Withers' Blog</source><guid isPermaLink="true">https://paulswithers.github.io/blog/2025/02/07/framework-web-14/</guid> </item> </channel></rss>